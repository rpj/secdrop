{"name":"Secdrop","tagline":"A secure, easy-to-use, web-based iOS-compatible drop box.","body":"Makes use of both symmetric (first stage is AES-256, encrypted in-browser) and asymmetric encryption (GPG public-key for second stage, performed on server side).\r\n\r\nAs first-stage encryption is performed within the browser via CryptoJS (256-bit AES), an SSL server isn't required. However, it is _highly_ recommended.\r\n\r\nRequirements\r\n============\r\n\r\n* `client/`\r\n * CryptoJS <http://code.google.com/p/crypto-js/>\r\n * jQuery >= 1.9.1 <http://jquery.com>\r\n * Bootstrap <http://twitter.github.com/bootstrap/>\r\n* `server/` and `dec/`\r\n * GPG (or PGP) <http://www.gnupg.org> \r\n* `dec/`\r\n * OpenSSL (command-line tool) <http://www.openssl.org>\r\n\r\nRecommended\r\n===========\r\n\r\n* An HTTPS server\r\n\r\nSource hierarchy\r\n================\r\n\r\n* `client/` - The client-side implementation of the UI, first-stage encryption and file-send functionality\r\n* `server/` - Server-side scripts for accepting uploads and performing second-stage asymmetric encryption.\r\n* `dec/` - The tools used to decrypt dropped files. *__Never__* use this on the server-side unless you *__fully__* trust your server!\r\n\r\nInstallation & Use\r\n====================\r\n\r\n* `client/`\r\n * Put these files in your __DocumentRoot__ or somewhere publicly-viewable for your HTTPS server.\r\n * Install client requirements (noted above) into the *js/* directory.\r\n\r\n* `server/`\r\n * Ensure GPG is available at */usr/bin/gpg* or set the proper path via the sec.cgi config (.sec.cgi.conf, key __GPGCLIPath__).\r\n * Configure the output path for dropped files via config key __OutputDirectory__. Default is */tmp/secdrop.output*. __This path must be writable for the user executing your CGI process__.\r\n * Configure the recipient GPG public key via config key __GPGRecipient__. This keypair must be available to the recipient using *dec/secdl.pl*.\r\n * __Be certain__ that you've configured your chosen web server to disallow access to the config file as well as the path used for __OutputDirectory__. \r\n\r\n* `dec/`\r\n * __Only use these scripts for decryption on a trusted machine.__\r\n * `dec/secdl.pl arg1 arg2` decrypts files in *arg1* into directory *arg2*. (Presumably the files are sourced  from __OutputDirectory__ in the server config. I simply use *scp* to retrieve files.)\r\n  * You will be prompted for the password the original sender used to encrypt via the web UI.\r\n  * Second-stage decryption will be done with the GPG keypair for the recipient specified in the server config.\r\n\r\nDemo\r\n====\r\n\r\n(Client-side only. Unless you send me the password I'll never see the files.)\r\n\r\nhttp://sec.rpj.me","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}